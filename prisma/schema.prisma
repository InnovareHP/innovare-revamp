// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth_schema", "public", "company_schema"]
}


enum BlogStatus {
  DRAFT
  PUBLISHED

  @@schema("company_schema")
}


model User_table {
  id                  String               @id @default(uuid())
  user_name           String              
  user_email          String              
  user_email_verified Boolean          
  user_image          String?          
  user_created_at     DateTime             
  user_updated_at     DateTime          
  session_tables      Session_table[]
  user_account_tables User_account_table[]
  member_tables       Member_table[]
  invitation_tables   Invitation_table[]

  @@unique([user_email])
  @@map("user_table")
  @@schema("auth_schema")
}

model Session_table {
  id                             String     @id @default(uuid())
  session_expired_at             DateTime   
  session_token                  String     
  session_created_at             DateTime  
  session_updated_at             DateTime  
  session_ip_address             String?   
  session_user_agent             String?   
  session_user_id                String  
  user_table                     User_table @relation(fields: [session_user_id], references: [id], onDelete: Cascade)
  session_active_organization_id String?   

  @@unique([session_token])
  @@map("session_table")
  
  @@schema("auth_schema")
}

model User_account_table {
  id                                   String     @id @default(uuid())
  user_account_account_id              String     
  user_account_provider_id             String     
  user_account_user_id                 String   
  user_table                           User_table @relation(fields: [user_account_user_id], references: [id], onDelete: Cascade)
  user_account_access_token            String?  
  user_account_refresh_token           String?   
  user_account_id_token                String?   
  user_account_access_token_expires_at DateTime?  
  user_account_scope                   String?    
  user_account_password                String?    
  user_account_created_at              DateTime   
  user_account_updated_at              DateTime   

  @@map("user_account_table")
  
  @@schema("auth_schema")
}

model Verification_table {
  id                      String    @id @default(uuid())
  verification_identifier String   
  verification_value      String    
  verification_expires_at DateTime  
  verification_created_at DateTime? 
  verification_updated_at DateTime? 

  @@map("verification_table")
  
  @@schema("auth_schema")
}

model Organization_table {
  id                      String             @id @default(uuid())
  organization_name       String          
  organization_slug       String?    
  organization_logo       String?         
  organization_created_at DateTime        
  organization_metadata   String?          
  member_tables           Member_table[]
  invitation_tables       Invitation_table[]

  @@unique([organization_slug])
  @@map("organization_table")

  @@schema("auth_schema")
}

model Member_table {
  id                  String             @id @default(uuid())
  organizationId      String
  organization_table  Organization_table @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId              String
  user_table          User_table         @relation(fields: [userId], references: [id], onDelete: Cascade)
  member_role         String          
  member_created_at   DateTime         
  member_is_onboarded Boolean?           @default(false)
  member_position     String?
  member_bio          String?

  company_log_table company_log_table[]
  company_blog_table company_blog_table[]

  @@map("member_table")
  @@schema("auth_schema")
}

model Invitation_table {
  id                    String             @id @default(uuid())
  organization_id       String        
  organization_table    Organization_table @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  invitation_email      String       
  invitation_role       String?    
  invitation_status     String          
  invitation_expires_at DateTime        
  invitation_inviter_id String          
  user_table            User_table         @relation(fields: [invitation_inviter_id], references: [id], onDelete: Cascade)

  @@map("invitation_table")
  
  @@schema("auth_schema")
}

model company_log_table {
  id                  String                  @id @default(uuid())
  company_log_created_at DateTime              @default(now())
  company_log_time_in DateTime                 @default(now())
  company_log_time_out DateTime?             
  company_log_total_hours Int?
  company_log_member_id String

  member              Member_table            @relation(fields: [company_log_member_id], references: [id], onDelete: Cascade)
  tasks               company_log_task_table[]

  @@schema("company_schema")
} 

model company_log_task_table {
  company_log_task_id          String           @id @default(uuid())
  company_log_task_log_id      String
  company_log_task_description String  
  company_log_task_created_at  DateTime         @default(now())

  log company_log_table @relation(fields: [company_log_task_log_id], references: [id], onDelete: Cascade)

  @@schema("company_schema")
}

model company_blog_table {
  company_blog_id        String    @id @default(uuid())
  company_blog_title                  String
  company_blog_slug                   String    @unique
  company_blog_excerpt                String?   
  company_blog_content                String    
  company_blog_featured_image         String?   
  company_blog_status                 BlogStatus @default(DRAFT)
  company_blog_meta_title             String?
  company_blog_meta_description       String?
  company_blog_meta_keywords          String?
  
  company_blog_category               String?
  company_blog_tags                   company_blog_tag[]     @relation("BlogTags")


  company_blog_created_at             DateTime  @default(now())
  company_blog_updated_at             DateTime  @updatedAt
  company_blog_published_at           DateTime?

  company_blog_views Int @default(0)
  company_blog_likes Int @default(0)

  company_blog_member_id String
  member                 Member_table @relation(fields: [company_blog_member_id], references: [id])

  @@schema("company_schema")
}


model company_blog_tag {
  company_blog_tag_id    String  @id @default(uuid())
  company_blog_tag_name  String
  company_blog_tag_blogs company_blog_table[] @relation("BlogTags")

  @@schema("company_schema")
}

model company_client_table {
  company_client_id String @id @default(uuid())
  company_client_name String
  company_client_description String
  company_client_category String
  company_client_created_at DateTime @default(now())
  company_client_updated_at DateTime @default(now())
  company_client_member_id String

  @@schema("company_schema")
}

model company_get_in_touch_table {
  company_get_in_touch_id String @id @default(uuid())
  company_get_in_touch_name String
  company_get_in_touch_email String
  company_get_in_touch_phone String
  company_get_in_touch_online_presence String
  company_get_in_touch_contact_method String
  company_get_in_touch_message String
  company_get_in_touch_created_at DateTime @default(now())

  @@schema("company_schema")
}
